package com.project.gimme.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.project.gimme.pojo.ToDoList;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "todo_list".
 */
public class ToDoListDao extends AbstractDao<ToDoList, Integer> {

    public static final String TABLENAME = "todo_list";

    /**
     * Properties of entity ToDoList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "id");
        public final static Property OwnerId = new Property(1, Integer.class, "ownerId", false, "owner_id");
        public final static Property Text = new Property(2, String.class, "text", false, "text");
        public final static Property StartTime = new Property(3, java.util.Date.class, "startTime", false, "start_time");
        public final static Property EndTime = new Property(4, java.util.Date.class, "endTime", false, "end_time");
    }


    public ToDoListDao(DaoConfig config) {
        super(config);
    }

    public ToDoListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"todo_list\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"owner_id\" INTEGER," + // 1: ownerId
                "\"text\" TEXT," + // 2: text
                "\"start_time\" INTEGER," + // 3: startTime
                "\"end_time\" INTEGER);"); // 4: endTime
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"todo_list\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ToDoList entity) {
        stmt.clearBindings();

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindLong(2, ownerId);
        }

        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }

        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime.getTime());
        }

        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ToDoList entity) {
        stmt.clearBindings();

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindLong(2, ownerId);
        }

        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }

        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime.getTime());
        }

        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime.getTime());
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }

    @Override
    public ToDoList readEntity(Cursor cursor, int offset) {
        ToDoList entity = new ToDoList( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ownerId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
                cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startTime
                cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // endTime
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ToDoList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setOwnerId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
    }

    @Override
    protected final Integer updateKeyAfterInsert(ToDoList entity, long rowId) {
        return entity.getId();
    }

    @Override
    public Integer getKey(ToDoList entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ToDoList entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
