package com.project.gimme.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.project.gimme.pojo.ChannelUser;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "channel_user".
*/
public class ChannelUserDao extends AbstractDao<ChannelUser, Void> {

    public static final String TABLENAME = "channel_user";

    public ChannelUserDao(DaoConfig config) {
        super(config);
    }


    public ChannelUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"channel_user\" (" + //
                "\"channel_id\" INTEGER," + // 0: channelId
                "\"user_id\" INTEGER," + // 1: userId
                "\"channel_nick\" TEXT," + // 2: channelNick
                "\"type\" TEXT);"); // 3: type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_channel_user_channel_id_user_id ON \"channel_user\"" +
                " (\"channel_id\" ASC,\"user_id\" ASC);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"channel_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannelUser entity) {
        stmt.clearBindings();

        Integer channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindLong(1, channelId);
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }

        String channelNick = entity.getChannelNick();
        if (channelNick != null) {
            stmt.bindString(3, channelNick);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannelUser entity) {
        stmt.clearBindings();

        Integer channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindLong(1, channelId);
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }

        String channelNick = entity.getChannelNick();
        if (channelNick != null) {
            stmt.bindString(3, channelNick);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
    }

    @Override
    public ChannelUser readEntity(Cursor cursor, int offset) {
        ChannelUser entity = new ChannelUser( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // channelId
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channelNick
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // type
        );
        return entity;
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public void readEntity(Cursor cursor, ChannelUser entity, int offset) {
        entity.setChannelId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setChannelNick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    }

    /**
     * Properties of entity ChannelUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChannelId = new Property(0, Integer.class, "channelId", false, "channel_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "user_id");
        public final static Property ChannelNick = new Property(2, String.class, "channelNick", false, "channel_nick");
        public final static Property Type = new Property(3, String.class, "type", false, "type");
    }

    @Override
    protected final Void updateKeyAfterInsert(ChannelUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(ChannelUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(ChannelUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
