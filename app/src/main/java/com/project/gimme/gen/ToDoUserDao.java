package com.project.gimme.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.project.gimme.pojo.ToDoUser;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "todo_list".
 */
public class ToDoUserDao extends AbstractDao<ToDoUser, Void> {

    public static final String TABLENAME = "todo_list";

    /**
     * Properties of entity ToDoUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ToDoId = new Property(0, Integer.class, "toDoId", false, "todo_id");
        public final static Property Status = new Property(1, Integer.class, "status", false, "status");
        public final static Property UserId = new Property(2, Integer.class, "userId", false, "user_id");
    }


    public ToDoUserDao(DaoConfig config) {
        super(config);
    }

    public ToDoUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"todo_list\" (" + //
                "\"todo_id\" INTEGER," + // 0: toDoId
                "\"status\" INTEGER," + // 1: status
                "\"user_id\" INTEGER);"); // 2: userId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_todo_list_todo_id_user_id ON \"todo_list\"" +
                " (\"todo_id\" ASC,\"user_id\" ASC);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"todo_list\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ToDoUser entity) {
        stmt.clearBindings();

        Integer toDoId = entity.getToDoId();
        if (toDoId != null) {
            stmt.bindLong(1, toDoId);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(2, status);
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ToDoUser entity) {
        stmt.clearBindings();

        Integer toDoId = entity.getToDoId();
        if (toDoId != null) {
            stmt.bindLong(1, toDoId);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(2, status);
        }

        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public ToDoUser readEntity(Cursor cursor, int offset) {
        ToDoUser entity = new ToDoUser( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // toDoId
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // status
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // userId
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, ToDoUser entity, int offset) {
        entity.setToDoId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
    }

    @Override
    protected final Void updateKeyAfterInsert(ToDoUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(ToDoUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(ToDoUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
