package com.project.gimme.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.project.gimme.pojo.PersonalMsgUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "personal_msg_user".
*/
public class PersonalMsgUserDao extends AbstractDao<PersonalMsgUser, Void> {

    public static final String TABLENAME = "personal_msg_user";

    /**
     * Properties of entity PersonalMsgUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PersonalMsgId = new Property(0, Integer.class, "personalMsgId", false, "personal_msg_id");
        public final static Property AcceptId = new Property(1, Integer.class, "acceptId", false, "accept_id");
    }


    public PersonalMsgUserDao(DaoConfig config) {
        super(config);
    }
    
    public PersonalMsgUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"personal_msg_user\" (" + //
                "\"personal_msg_id\" INTEGER," + // 0: personalMsgId
                "\"accept_id\" INTEGER);"); // 1: acceptId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"personal_msg_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PersonalMsgUser entity) {
        stmt.clearBindings();
 
        Integer personalMsgId = entity.getPersonalMsgId();
        if (personalMsgId != null) {
            stmt.bindLong(1, personalMsgId);
        }
 
        Integer acceptId = entity.getAcceptId();
        if (acceptId != null) {
            stmt.bindLong(2, acceptId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PersonalMsgUser entity) {
        stmt.clearBindings();
 
        Integer personalMsgId = entity.getPersonalMsgId();
        if (personalMsgId != null) {
            stmt.bindLong(1, personalMsgId);
        }
 
        Integer acceptId = entity.getAcceptId();
        if (acceptId != null) {
            stmt.bindLong(2, acceptId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PersonalMsgUser readEntity(Cursor cursor, int offset) {
        PersonalMsgUser entity = new PersonalMsgUser( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // personalMsgId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1) // acceptId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PersonalMsgUser entity, int offset) {
        entity.setPersonalMsgId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setAcceptId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PersonalMsgUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PersonalMsgUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(PersonalMsgUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
