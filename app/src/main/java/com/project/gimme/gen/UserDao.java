package com.project.gimme.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.project.gimme.pojo.User;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user".
*/
public class UserDao extends AbstractDao<User, Integer> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "id");
        public final static Property Nick = new Property(1, String.class, "nick", false, "nick");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "avatar");
        public final static Property City = new Property(3, String.class, "city", false, "city");
        public final static Property Province = new Property(4, Integer.class, "province", false, "province");
        public final static Property Birthday = new Property(5, java.util.Date.class, "birthday", false, "birthday");
        public final static Property Mail = new Property(6, String.class, "mail", false, "mail");
        public final static Property Gender = new Property(7, Integer.class, "gender", false, "gender");
        public final static Property Occupation = new Property(8, Integer.class, "occupation", false, "occupation");
        public final static Property Motto = new Property(9, String.class, "motto", false, "motto");
        public final static Property Company = new Property(10, String.class, "company", false, "company");
        public final static Property Password = new Property(11, String.class, "password", false, "password");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"nick\" TEXT," + // 1: nick
                "\"avatar\" TEXT," + // 2: avatar
                "\"city\" TEXT," + // 3: city
                "\"province\" INTEGER," + // 4: province
                "\"birthday\" INTEGER," + // 5: birthday
                "\"mail\" TEXT," + // 6: mail
                "\"gender\" INTEGER," + // 7: gender
                "\"occupation\" INTEGER," + // 8: occupation
                "\"motto\" TEXT," + // 9: motto
                "\"company\" TEXT," + // 10: company
                "\"password\" TEXT);"); // 11: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }

        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        Integer province = entity.getProvince();
        if (province != null) {
            stmt.bindLong(5, province);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(6, birthday.getTime());
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(7, mail);
        }

        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(8, gender);
        }

        Integer occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindLong(9, occupation);
        }

        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(10, motto);
        }

        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(11, company);
        }

        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(12, password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }

        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        Integer province = entity.getProvince();
        if (province != null) {
            stmt.bindLong(5, province);
        }
 
        java.util.Date birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(6, birthday.getTime());
        }
 
        String mail = entity.getMail();
        if (mail != null) {
            stmt.bindString(7, mail);
        }

        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(8, gender);
        }

        Integer occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindLong(9, occupation);
        }

        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(10, motto);
        }

        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(11, company);
        }

        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(12, password);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nick
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // province
                cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // birthday
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mail
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // gender
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // occupation
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // motto
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // company
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProvince(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setMail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setOccupation(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMotto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompany(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPassword(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
    }
    
    @Override
    protected final Integer updateKeyAfterInsert(User entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
