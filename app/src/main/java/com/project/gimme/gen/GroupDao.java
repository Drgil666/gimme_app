package com.project.gimme.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.project.gimme.pojo.Group;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "group".
 */
public class GroupDao extends AbstractDao<Group, Integer> {

    public static final String TABLENAME = "group";

    /**
     * Properties of entity Group.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "id");
        public final static Property CreateTime = new Property(1, java.util.Date.class, "createTime", false, "create_time");
        public final static Property Nick = new Property(2, String.class, "nick", false, "nick");
        public final static Property Description = new Property(3, String.class, "description", false, "description");
    }


    public GroupDao(DaoConfig config) {
        super(config);
    }

    public GroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"group\" (" + //
                "\"id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"create_time\" INTEGER," + // 1: createTime
                "\"nick\" TEXT," + // 2: nick
                "\"description\" TEXT);"); // 3: description
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"group\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Group entity) {
        stmt.clearBindings();

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime.getTime());
        }

        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(3, nick);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Group entity) {
        stmt.clearBindings();

        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime.getTime());
        }

        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(3, nick);
        }

        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }

    @Override
    public Group readEntity(Cursor cursor, int offset) {
        Group entity = new Group( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
                cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createTime
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nick
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // description
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Group entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setNick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
    }

    @Override
    protected final Integer updateKeyAfterInsert(Group entity, long rowId) {
        return entity.getId();
    }

    @Override
    public Integer getKey(Group entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Group entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
